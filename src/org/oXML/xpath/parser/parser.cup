package org.oXML.xpath.parser;

import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java_cup.runtime.Symbol;
import org.oXML.xpath.Expression;
import org.oXML.xpath.step.*;
import org.oXML.xpath.axis.*;
import org.oXML.xpath.function.FunctionCall;
import org.oXML.xpath.function.TypeFunctionCall;
import org.oXML.xpath.variable.VariableReference;
import org.oXML.util.Log;

parser code {:

    public Symbol parse(String expr)
      throws Exception {
	GeneratedLexer scanner = new GeneratedLexer(new StringReader(expr));
	setScanner(scanner);
	return parse();
    }

    public void report_error(String message, Object info)
    {
        Log.error(message+" info: "+info);
    }

    public void report_fatal_error(String message, Object info)
      throws Exception
    {
        Log.error(message);
        throw new ParserException(message);
    }
:}

non terminal LocationPath location_path;
non terminal LocationPath absolute_location_path;
non terminal RelativeLocationPath relative_location_path;
non terminal Step step;
non terminal Axis axis_specifier;
non terminal NodeTest node_test;
non terminal Predicate predicate;
non terminal List predicate_list;
non terminal Expression expr;
non terminal Expression primary_expr;
non terminal FunctionCall function_call;
non terminal List arg_list;
non terminal Expression union_expr;
non terminal Expression path_expr;
non terminal Expression filter_expr;
non terminal Expression or_expr;
non terminal Expression and_expr;
non terminal Expression equality_expr;
non terminal Expression relational_expr;
non terminal Expression additive_expr;
non terminal Expression multiplicative_expr;
non terminal Expression unary_expr;
non terminal Double number;
non terminal VariableReference variable_ref;
non terminal QName name_test;
non terminal QName qname;
non terminal String nc_name;
terminal COMMA;
terminal NOTEQUALS;
terminal EQUALS;
terminal LT, GT, LTE, GTE;
terminal LPAREN, RPAREN;
terminal LANGLE, RANGLE;
terminal ASTERISK;
terminal AT;
terminal BAR;
terminal PLUS;
terminal MINUS;
terminal DIV;
terminal MOD;
terminal OR;
terminal AND;
terminal DOLLAR;
terminal SLASH;
terminal SLASHSLASH;
terminal DOT;
terminal DOTDOT;
terminal COLON;
terminal ANCESTOR;
terminal ANCESTOR_OR_SELF;
terminal ATTRIBUTE;
terminal CHILD;
terminal DESCENDANT;
terminal DESCENDANT_OR_SELF;
terminal FOLLOWING;
terminal FOLLOWING_SIBLING;
terminal NAMESPACE;
terminal PARENT;
terminal PRECEDING;
terminal PRECEDING_SIBLING;
terminal SELF;
terminal COMMENT;
terminal TEXT;
terminal PROCESSING_INSTRUCTION;
terminal NODE;
terminal String LITERAL;
terminal String NC_NAME;
terminal Double NUMBER;

precedence left BAR;
precedence left OR;
precedence left AND;
precedence nonassoc EQUALS, NOTEQUALS;
precedence left LT, GT, LTE, GTE;
    
precedence left PLUS, MINUS;
precedence left DIV, MOD, ASTERISK;
precedence left DOLLAR;
precedence left AT;

// 2.0 Location Paths

start with expr;

location_path ::=
                relative_location_path:rlp {: RESULT=rlp; :}
              | absolute_location_path:alp {: RESULT=alp; :};

absolute_location_path ::= 
                SLASH {: RESULT = new AbsoluteLocationPath(); :}
              | SLASH relative_location_path:rlp {: RESULT = new AbsoluteLocationPath(rlp); :}
              | SLASHSLASH relative_location_path:rlp {: RESULT = new AbbreviatedAbsoluteLocationPath(rlp); :};

relative_location_path ::=
                step:s {: RESULT = new RelativeLocationPath(s); :}
              | relative_location_path:rlp SLASH step:s  {: rlp.add(s); RESULT = rlp; :}
              | relative_location_path:rlp SLASHSLASH step:s {: rlp.add(new Step(new DescendantOrSelfAxis())); rlp.add(s); RESULT = rlp; :};

// 2.1 Location Steps

step ::=
                axis_specifier:as node_test:nt {: RESULT = new Step(as, nt); :}
              | axis_specifier:as node_test:nt predicate_list:pl {: RESULT = new PredicatedStep(as, nt, pl); :}
              | node_test:nt {: RESULT = new Step(nt); :}
              | node_test:nt predicate_list:pl {: RESULT = new PredicatedStep(nt, pl); :}
              | DOT {: RESULT = new Step(new SelfAxis()); :}
              | DOTDOT {: RESULT = new Step(new ParentAxis()); :};

// 2.2 Axes

axis_specifier ::=
                AT:a {: RESULT = new AttributeAxis(); :}
              | ANCESTOR {: RESULT = new AncestorAxis(); :}
              | ANCESTOR_OR_SELF {: RESULT = new AncestorOrSelfAxis(); :}
              | ATTRIBUTE {: RESULT = new AttributeAxis(); :}
              | CHILD {: RESULT = new ChildAxis(); :}
              | DESCENDANT {: RESULT = new DescendantAxis(); :}
              | DESCENDANT_OR_SELF {: RESULT = new DescendantOrSelfAxis(); :}
              | FOLLOWING {: RESULT = new FollowingAxis(); :}
              | FOLLOWING_SIBLING {: RESULT = new FollowingSiblingAxis(); :}
              | NAMESPACE {: RESULT = new NamespaceAxis(); :}
              | PARENT {: RESULT = new ParentAxis(); :}
              | PRECEDING {: RESULT = new PrecedingAxis(); :}
              | PRECEDING_SIBLING {: RESULT = new PrecedingSiblingAxis(); :}
              | SELF {: RESULT = new SelfAxis(); :};
//                | {: RESULT = new ChildAxis(); :};

// 2.3 Node Tests

node_test ::=
                name_test:nt {: RESULT = new NameTest(nt); :}
              | NODE LPAREN RPAREN {: RESULT = new NodeType(NodeType.NODE); :}
              | TEXT LPAREN RPAREN {: RESULT = new NodeType(NodeType.TEXT); :}
              | COMMENT LPAREN RPAREN {: RESULT = new NodeType(NodeType.COMMENT); :}
              | PROCESSING_INSTRUCTION LPAREN RPAREN {: RESULT = new NodeType(NodeType.PROCESSING_INSTRUCTION); :}
              | PROCESSING_INSTRUCTION LPAREN LITERAL:l RPAREN;

// 2.4 Predicates

predicate ::=
                LANGLE expr:pe RANGLE  {: RESULT = new Predicate(pe); :};

predicate_list ::=
                predicate:p {: List pl = new ArrayList(); pl.add(p); RESULT=pl; :}
              | predicate_list:pl predicate:p {: pl.add(p); RESULT=pl; :};

// 2.5 Abbreviated Syntax

// 3.0 Expressions 
// 3.1 Basics

expr ::=
                or_expr:oe {: RESULT=oe; :};

primary_expr ::=
                variable_ref:vr {: RESULT = vr; :}
              | LPAREN expr:e RPAREN {: RESULT = e; :}
              | LITERAL:l {: RESULT = new LiteralExpression(l); :}
              | number:n {: RESULT = new NumberExpression(n); :}
              | function_call:fc {: RESULT = fc; :};

// 3.2 Function Calls

function_call ::=
                qname:name LPAREN arg_list:al RPAREN {: RESULT = new
                FunctionCall(name, al); :}
              | path_expr:pe DOT qname:name LPAREN arg_list:al RPAREN 
                {: RESULT = new TypeFunctionCall(pe, name, al); :};

arg_list ::=
                expr:e {: List al = new ArrayList(); al.add(e); RESULT=al; :}
              | arg_list:al COMMA expr:e {: al.add(e); RESULT=al; :}
              | {: RESULT = Collections.EMPTY_LIST; :};

// 3.3 Node Sets

union_expr ::=
                path_expr:pe {: RESULT=pe; :}
              | union_expr:ue BAR path_expr:pe {: RESULT = new UnionExpression(ue, pe); :};

path_expr ::=
                location_path:lp {: RESULT=lp; :}
              | filter_expr:fe {: RESULT=fe; :}
              | filter_expr:fe SLASH relative_location_path:rlp {: RESULT = new FilterExpression(fe, rlp); :}
              | filter_expr:fe SLASHSLASH relative_location_path:rlp {: rlp.insert(new Step(new DescendantOrSelfAxis())); RESULT = new FilterExpression(fe, rlp); :};

filter_expr ::=
                primary_expr:pe {: RESULT=pe; :}
              | primary_expr:pe predicate_list:pl {: RESULT = new PredicatedFilterExpression(pe, pl); :};

// 3.4 Booleans

or_expr ::=
                and_expr:ae {: RESULT=ae; :}
              | or_expr:oe OR and_expr:ae {: RESULT = new BooleanExpression(oe, ae, BooleanExpression.OR); :};

and_expr ::=
                equality_expr:ee {: RESULT=ee; :}
              | and_expr:ae AND equality_expr:ee {: RESULT = new BooleanExpression(ae, ee, BooleanExpression.AND); :};

equality_expr ::=
                relational_expr:re {: RESULT=re; :}
              | equality_expr:ee EQUALS relational_expr:re {: RESULT = new EqualityExpression(ee, re); :}
              | equality_expr:ee NOTEQUALS relational_expr:re {: RESULT = new EqualityExpression(ee, re, true); :};

relational_expr ::=
                additive_expr:ae {: RESULT=ae; :}
              | relational_expr:re LT additive_expr:ae {: RESULT = new RelationalExpression(re, ae, RelationalExpression.LESS_THAN); :}
              | relational_expr:re GT additive_expr:ae {: RESULT = new RelationalExpression(re, ae, RelationalExpression.GREATER_THAN); :}
              | relational_expr:re LTE additive_expr:ae {: RESULT = new RelationalExpression(re, ae, RelationalExpression.LESS_THAN_OR_EQUAL); :}
              | relational_expr:re GTE additive_expr:ae {: RESULT = new RelationalExpression(re, ae, RelationalExpression.GREATER_THAN_OR_EQUAL); :};

// 3.5 Numbers

additive_expr ::=
                multiplicative_expr:me {: RESULT=me; :}
              | additive_expr:ae PLUS multiplicative_expr:me {: RESULT = new MathExpression(ae, me, MathExpression.PLUS); :}
              | additive_expr:ae MINUS multiplicative_expr:me {: RESULT = new MathExpression(ae, me, MathExpression.MINUS); :};

multiplicative_expr ::=
                unary_expr:ue {: RESULT=ue; :}
              | multiplicative_expr:me ASTERISK unary_expr:ue {: RESULT = new MathExpression(me, ue, MathExpression.MULTIPLICATION); :}
              | multiplicative_expr:me DIV unary_expr:ue {: RESULT = new MathExpression(me, ue, MathExpression.DIVISION); :}
              | multiplicative_expr:me MOD unary_expr:ue {: RESULT = new MathExpression(me, ue, MathExpression.MODULO); :};

unary_expr ::=
                union_expr:ue {: RESULT=ue; :}
              | MINUS union_expr:ue {: RESULT = new NegativeExpression(ue); :};

// 3.6 Strings

// 3.7 Lexical Structure

number ::=
                NUMBER:i  {: RESULT = i; :};

variable_ref ::=
                DOLLAR qname:qn {: RESULT = new VariableReference(qn); :};

name_test ::=
                ASTERISK {: RESULT = new WildcardName(); :}
              | nc_name:prefix COLON ASTERISK {: RESULT = new PrefixedWildcard(prefix); :}
              | qname:q {: RESULT = q; :};

qname ::=
                nc_name:nn {: RESULT = new LocalName(nn); :}
              | nc_name:prefix COLON nc_name:name {: RESULT = new FQName(prefix, name); :};

nc_name ::=
                NC_NAME:nn {: RESULT = nn; :}
              | COMMENT {: RESULT = "comment"; :}
              | NODE {: RESULT = "node"; :}
              | TEXT {: RESULT = "text"; :}
              | PROCESSING_INSTRUCTION {: RESULT = "processing-instruction"; :}
              | DIV {: RESULT = "div"; :}
              | MOD {: RESULT = "mod"; :}
              | AND {: RESULT = "and"; :}
              | OR {: RESULT = "or"; :};
