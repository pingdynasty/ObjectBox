
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Tue Apr 24 12:51:12 BST 2007
//----------------------------------------------------

package org.oXML.xpath.parser;

import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java_cup.runtime.Symbol;
import org.oXML.xpath.Expression;
import org.oXML.xpath.step.*;
import org.oXML.xpath.axis.*;
import org.oXML.xpath.function.FunctionCall;
import org.oXML.xpath.function.TypeFunctionCall;
import org.oXML.xpath.variable.VariableReference;
import org.oXML.util.Log;

/** CUP v0.10j generated parser.
  * @version Tue Apr 24 12:51:12 BST 2007
  */
public class GeneratedParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public GeneratedParser() {super();}

  /** Constructor which sets the default scanner. */
  public GeneratedParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\004" +
    "\000\002\005\003\000\002\005\005\000\002\005\005\000" +
    "\002\006\004\000\002\006\005\000\002\006\003\000\002" +
    "\006\004\000\002\006\003\000\002\006\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\003\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\006\000" +
    "\002\011\005\000\002\012\003\000\002\012\004\000\002" +
    "\013\003\000\002\014\003\000\002\014\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\006" +
    "\000\002\015\010\000\002\016\003\000\002\016\005\000" +
    "\002\016\002\000\002\017\003\000\002\017\005\000\002" +
    "\020\003\000\002\020\003\000\002\020\005\000\002\020" +
    "\005\000\002\021\003\000\002\021\004\000\002\022\003" +
    "\000\002\022\005\000\002\023\003\000\002\023\005\000" +
    "\002\024\003\000\002\024\005\000\002\024\005\000\002" +
    "\025\003\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\026\003\000\002\026\005" +
    "\000\002\026\005\000\002\027\003\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\030\003\000\002" +
    "\030\004\000\002\031\003\000\002\032\004\000\002\033" +
    "\003\000\002\033\005\000\002\033\003\000\002\034\003" +
    "\000\002\034\005\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\104\013\016\017\010\020\067\023\021\024" +
    "\040\025\051\026\032\027\026\030\061\031\013\032\015" +
    "\033\043\034\037\036\056\037\053\040\072\041\023\042" +
    "\044\043\042\044\065\045\036\046\011\047\064\050\052" +
    "\051\006\052\047\053\014\054\066\055\024\056\073\057" +
    "\057\060\041\061\050\001\002\000\056\002\uffda\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\031\uffda\032\uffda\033" +
    "\uffda\001\002\000\056\002\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\017\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\031\uffe4\032\uffe4\033\uffe4\001\002\000" +
    "\026\017\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\060\uffe6\001\002\000\050\002" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\014\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\033\203\001\002" +
    "\000\056\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\011\uffb1\012\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1" +
    "\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\001\002\000\026\017\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\060\uffe9\001\002\000\056\002\ufff6\004\ufff6" +
    "\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014" +
    "\ufff6\015\147\016\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\031\ufff6\032\ufff6\033" +
    "\ufff6\001\002\000\120\002\ufffe\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\014\ufffe\016\ufffe\017" +
    "\010\020\067\021\ufffe\022\ufffe\023\ufffe\024\040\025\051" +
    "\026\032\027\026\033\043\034\037\036\056\037\053\040" +
    "\072\041\023\042\044\043\042\044\065\045\036\046\011" +
    "\047\064\050\052\051\006\052\047\053\014\054\066\055" +
    "\024\056\073\060\041\001\002\000\062\002\uffab\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013" +
    "\214\014\uffab\015\uffab\016\uffab\017\uffab\021\uffab\022\uffab" +
    "\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\031\uffab\032" +
    "\uffab\033\uffab\035\uffab\001\002\000\066\017\010\020\067" +
    "\024\040\025\051\026\032\027\026\033\043\034\037\036" +
    "\056\037\053\040\072\041\023\042\044\043\042\044\065" +
    "\045\036\046\011\047\064\050\052\051\006\052\047\053" +
    "\014\054\066\055\024\056\073\060\041\001\002\000\104" +
    "\013\016\017\010\020\067\023\021\024\040\025\051\026" +
    "\032\027\026\030\061\031\013\032\015\033\043\034\037" +
    "\036\056\037\053\040\072\041\023\042\044\043\042\044" +
    "\065\045\036\046\011\047\064\050\052\051\006\052\047" +
    "\053\014\054\066\055\024\056\073\057\057\060\041\061" +
    "\050\001\002\000\044\002\uffbc\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\014\uffbc\016\uffbc\017" +
    "\117\022\uffbc\023\uffbc\024\120\025\116\026\uffbc\027\uffbc" +
    "\001\002\000\036\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\014\uffc1\016\uffc1\022\113" +
    "\023\114\026\uffc1\027\uffc1\001\002\000\102\013\016\017" +
    "\010\020\067\024\040\025\051\026\032\027\026\030\061" +
    "\031\013\032\015\033\043\034\037\036\056\037\053\040" +
    "\072\041\023\042\044\043\042\044\065\045\036\046\011" +
    "\047\064\050\052\051\006\052\047\053\014\054\066\055" +
    "\024\056\073\057\057\060\041\061\050\001\002\000\046" +
    "\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\014\uffb5\016\uffb5\017\uffb5\021\201\022\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\001\002\000" +
    "\026\017\uffee\024\uffee\025\uffee\026\uffee\027\uffee\053\uffee" +
    "\054\uffee\055\uffee\056\uffee\060\uffee\001\002\000\062\002" +
    "\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\175\014\uffa8\015\uffa8\016\uffa8\017\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\035\uffa8\001\002\000\016\002" +
    "\uffc8\004\uffc8\014\uffc8\016\uffc8\026\uffc8\027\101\001\002" +
    "\000\062\002\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026" +
    "\uffa5\027\uffa5\031\uffa5\032\uffa5\033\uffa5\035\uffa5\001\002" +
    "\000\044\002\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010" +
    "\uffb9\011\uffb9\012\uffb9\014\uffb9\016\uffb9\017\uffb9\022\uffb9" +
    "\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\001\002\000" +
    "\026\017\010\024\040\025\051\026\032\027\026\053\014" +
    "\054\066\055\024\056\073\060\041\001\002\000\054\002" +
    "\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\014\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\031\167\032\170" +
    "\033\uffcd\001\002\000\062\002\uffa4\004\uffa4\005\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\015\uffa4\016\uffa4\017\uffa4\021\uffa4\022\uffa4\023\uffa4\024" +
    "\uffa4\025\uffa4\026\uffa4\027\uffa4\031\uffa4\032\uffa4\033\uffa4" +
    "\035\uffa4\001\002\000\054\002\000\004\000\005\000\006" +
    "\000\007\000\010\000\011\000\012\000\014\000\016\000" +
    "\017\000\021\000\022\000\023\000\024\000\025\000\026" +
    "\000\027\000\031\162\032\163\033\000\001\002\000\060" +
    "\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\013\154\014\uffaf\015\uffaf\016\uffaf\017\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\001\002\000\050\002\uffce" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012" +
    "\uffce\014\uffce\016\uffce\017\uffce\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\033\uffce\001\002\000" +
    "\026\017\uffea\024\uffea\025\uffea\026\uffea\027\uffea\053\uffea" +
    "\054\uffea\055\uffea\056\uffea\060\uffea\001\002\000\054\002" +
    "\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\016\ufff3\017\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\031\ufff3\032\ufff3" +
    "\033\ufff3\001\002\000\062\002\uffa7\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\035\uffa7\001\002\000\062\002\uffac\004\uffac\005\uffac\006" +
    "\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\031\uffac\032\uffac\033\uffac" +
    "\035\uffac\001\002\000\026\017\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\053\uffec\054\uffec\055\uffec\056\uffec\060\uffec" +
    "\001\002\000\054\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\016\ufff4\017\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\001\002\000\026\017\uffed" +
    "\024\uffed\025\uffed\026\uffed\027\uffed\053\uffed\054\uffed\055" +
    "\uffed\056\uffed\060\uffed\001\002\000\056\002\uffca\004\uffca" +
    "\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\014" +
    "\uffca\015\147\016\uffca\017\uffca\021\uffca\022\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca\032\uffca\033" +
    "\uffca\001\002\000\032\002\uffc4\004\uffc4\005\uffc4\006\uffc4" +
    "\007\106\010\110\011\111\012\107\014\uffc4\016\uffc4\026" +
    "\uffc4\027\uffc4\001\002\000\026\017\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\060" +
    "\uffe5\001\002\000\056\002\uffb3\004\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\012\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\027\uffb3\031\uffb3\032\uffb3\033\uffb3\001\002\000" +
    "\062\002\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\031\uffa6\032\uffa6\033\uffa6\035\uffa6\001\002\000" +
    "\026\017\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\060\uffe7\001\002\000\026\017" +
    "\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0\053\ufff0\054\ufff0" +
    "\055\ufff0\056\ufff0\060\ufff0\001\002\000\054\002\ufffb\004" +
    "\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb" +
    "\014\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb\024" +
    "\ufffb\025\ufffb\026\ufffb\027\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\001\002\000\062\002\uffae\004\uffae\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\031\uffae\032\uffae\033\uffae\035\144" +
    "\001\002\000\026\017\ufff1\024\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\053\ufff1\054\ufff1\055\ufff1\056\ufff1\060\ufff1\001\002" +
    "\000\056\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\001\002\000\022\002\uffc6" +
    "\004\uffc6\005\104\006\103\014\uffc6\016\uffc6\026\uffc6\027" +
    "\uffc6\001\002\000\024\024\040\025\051\026\032\027\026" +
    "\053\141\054\140\055\134\056\135\060\041\001\002\000" +
    "\004\002\133\001\002\000\056\002\uffd6\004\uffd6\005\uffd6" +
    "\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\031\uffd6\032\uffd6\033\uffd6\001" +
    "\002\000\026\017\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\060\uffe8\001\002\000" +
    "\026\017\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\053\uffeb" +
    "\054\uffeb\055\uffeb\056\uffeb\060\uffeb\001\002\000\062\002" +
    "\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\131\014\uffa9\015\uffa9\016\uffa9\017\uffa9\021" +
    "\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\035\uffa9\001\002\000\026\017" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\053\ufff2\054\ufff2" +
    "\055\ufff2\056\ufff2\060\ufff2\001\002\000\050\002\uffff\004" +
    "\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff" +
    "\014\uffff\016\uffff\017\uffff\021\uffff\022\uffff\023\uffff\024" +
    "\uffff\025\uffff\026\uffff\027\uffff\033\uffff\001\002\000\014" +
    "\002\uffdb\004\uffdb\014\uffdb\016\uffdb\026\077\001\002\000" +
    "\026\017\uffef\024\uffef\025\uffef\026\uffef\027\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\060\uffef\001\002\000\062\002" +
    "\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\075\014\uffaa\015\uffaa\016\uffaa\017\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\035\uffaa\001\002\000\056\002" +
    "\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\001\002\000\004\014\076\001\002\000" +
    "\056\002\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\021" +
    "\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\001\002\000\104\013\016\017" +
    "\010\020\067\023\021\024\040\025\051\026\032\027\026" +
    "\030\061\031\013\032\015\033\043\034\037\036\056\037" +
    "\053\040\072\041\023\042\044\043\042\044\065\045\036" +
    "\046\011\047\064\050\052\051\006\052\047\053\014\054" +
    "\066\055\024\056\073\057\057\060\041\061\050\001\002" +
    "\000\016\002\uffc7\004\uffc7\014\uffc7\016\uffc7\026\uffc7\027" +
    "\101\001\002\000\104\013\016\017\010\020\067\023\021" +
    "\024\040\025\051\026\032\027\026\030\061\031\013\032" +
    "\015\033\043\034\037\036\056\037\053\040\072\041\023" +
    "\042\044\043\042\044\065\045\036\046\011\047\064\050" +
    "\052\051\006\052\047\053\014\054\066\055\024\056\073" +
    "\057\057\060\041\061\050\001\002\000\022\002\uffc5\004" +
    "\uffc5\005\104\006\103\014\uffc5\016\uffc5\026\uffc5\027\uffc5" +
    "\001\002\000\104\013\016\017\010\020\067\023\021\024" +
    "\040\025\051\026\032\027\026\030\061\031\013\032\015" +
    "\033\043\034\037\036\056\037\053\040\072\041\023\042" +
    "\044\043\042\044\065\045\036\046\011\047\064\050\052" +
    "\051\006\052\047\053\014\054\066\055\024\056\073\057" +
    "\057\060\041\061\050\001\002\000\104\013\016\017\010" +
    "\020\067\023\021\024\040\025\051\026\032\027\026\030" +
    "\061\031\013\032\015\033\043\034\037\036\056\037\053" +
    "\040\072\041\023\042\044\043\042\044\065\045\036\046" +
    "\011\047\064\050\052\051\006\052\047\053\014\054\066" +
    "\055\024\056\073\057\057\060\041\061\050\001\002\000" +
    "\032\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\106\010\110" +
    "\011\111\012\107\014\uffc2\016\uffc2\026\uffc2\027\uffc2\001" +
    "\002\000\104\013\016\017\010\020\067\023\021\024\040" +
    "\025\051\026\032\027\026\030\061\031\013\032\015\033" +
    "\043\034\037\036\056\037\053\040\072\041\023\042\044" +
    "\043\042\044\065\045\036\046\011\047\064\050\052\051" +
    "\006\052\047\053\014\054\066\055\024\056\073\057\057" +
    "\060\041\061\050\001\002\000\104\013\016\017\010\020" +
    "\067\023\021\024\040\025\051\026\032\027\026\030\061" +
    "\031\013\032\015\033\043\034\037\036\056\037\053\040" +
    "\072\041\023\042\044\043\042\044\065\045\036\046\011" +
    "\047\064\050\052\051\006\052\047\053\014\054\066\055" +
    "\024\056\073\057\057\060\041\061\050\001\002\000\104" +
    "\013\016\017\010\020\067\023\021\024\040\025\051\026" +
    "\032\027\026\030\061\031\013\032\015\033\043\034\037" +
    "\036\056\037\053\040\072\041\023\042\044\043\042\044" +
    "\065\045\036\046\011\047\064\050\052\051\006\052\047" +
    "\053\014\054\066\055\024\056\073\057\057\060\041\061" +
    "\050\001\002\000\104\013\016\017\010\020\067\023\021" +
    "\024\040\025\051\026\032\027\026\030\061\031\013\032" +
    "\015\033\043\034\037\036\056\037\053\040\072\041\023" +
    "\042\044\043\042\044\065\045\036\046\011\047\064\050" +
    "\052\051\006\052\047\053\014\054\066\055\024\056\073" +
    "\057\057\060\041\061\050\001\002\000\036\002\uffbe\004" +
    "\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe" +
    "\014\uffbe\016\uffbe\022\113\023\114\026\uffbe\027\uffbe\001" +
    "\002\000\104\013\016\017\010\020\067\023\021\024\040" +
    "\025\051\026\032\027\026\030\061\031\013\032\015\033" +
    "\043\034\037\036\056\037\053\040\072\041\023\042\044" +
    "\043\042\044\065\045\036\046\011\047\064\050\052\051" +
    "\006\052\047\053\014\054\066\055\024\056\073\057\057" +
    "\060\041\061\050\001\002\000\104\013\016\017\010\020" +
    "\067\023\021\024\040\025\051\026\032\027\026\030\061" +
    "\031\013\032\015\033\043\034\037\036\056\037\053\040" +
    "\072\041\023\042\044\043\042\044\065\045\036\046\011" +
    "\047\064\050\052\051\006\052\047\053\014\054\066\055" +
    "\024\056\073\057\057\060\041\061\050\001\002\000\044" +
    "\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\014\uffba\016\uffba\017\117\022\uffba\023\uffba" +
    "\024\120\025\116\026\uffba\027\uffba\001\002\000\104\013" +
    "\016\017\010\020\067\023\021\024\040\025\051\026\032" +
    "\027\026\030\061\031\013\032\015\033\043\034\037\036" +
    "\056\037\053\040\072\041\023\042\044\043\042\044\065" +
    "\045\036\046\011\047\064\050\052\051\006\052\047\053" +
    "\014\054\066\055\024\056\073\057\057\060\041\061\050" +
    "\001\002\000\104\013\016\017\010\020\067\023\021\024" +
    "\040\025\051\026\032\027\026\030\061\031\013\032\015" +
    "\033\043\034\037\036\056\037\053\040\072\041\023\042" +
    "\044\043\042\044\065\045\036\046\011\047\064\050\052" +
    "\051\006\052\047\053\014\054\066\055\024\056\073\057" +
    "\057\060\041\061\050\001\002\000\104\013\016\017\010" +
    "\020\067\023\021\024\040\025\051\026\032\027\026\030" +
    "\061\031\013\032\015\033\043\034\037\036\056\037\053" +
    "\040\072\041\023\042\044\043\042\044\065\045\036\046" +
    "\011\047\064\050\052\051\006\052\047\053\014\054\066" +
    "\055\024\056\073\057\057\060\041\061\050\001\002\000" +
    "\044\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\014\uffb7\016\uffb7\017\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\001\002\000\044" +
    "\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\014\uffb8\016\uffb8\017\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\027\uffb8\001\002\000\044\002" +
    "\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6" +
    "\012\uffb6\014\uffb6\016\uffb6\017\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\001\002\000\044\002\uffbb" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012" +
    "\uffbb\014\uffbb\016\uffbb\017\117\022\uffbb\023\uffbb\024\120" +
    "\025\116\026\uffbb\027\uffbb\001\002\000\036\002\uffbf\004" +
    "\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\014\uffbf\016\uffbf\022\113\023\114\026\uffbf\027\uffbf\001" +
    "\002\000\036\002\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\014\uffbd\016\uffbd\022\113\023" +
    "\114\026\uffbd\027\uffbd\001\002\000\036\002\uffc0\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\014" +
    "\uffc0\016\uffc0\022\113\023\114\026\uffc0\027\uffc0\001\002" +
    "\000\032\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\106\010" +
    "\110\011\111\012\107\014\uffc3\016\uffc3\026\uffc3\027\uffc3" +
    "\001\002\000\004\014\132\001\002\000\056\002\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\032\uffe2" +
    "\033\uffe2\001\002\000\004\002\001\001\002\000\062\002" +
    "\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8" +
    "\031\uffa8\032\uffa8\033\uffa8\035\uffa8\001\002\000\062\002" +
    "\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\021" +
    "\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\035\uffaa\001\002\000\056\002" +
    "\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\014\uffb2\015\uffb2\016\uffb2\017\uffb2\021\uffb2\022" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\031\uffb2" +
    "\032\uffb2\033\uffb2\001\002\000\062\002\uffae\004\uffae\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\021\uffae\022\uffae\023" +
    "\uffae\024\uffae\025\uffae\026\uffae\027\uffae\031\uffae\032\uffae" +
    "\033\uffae\035\142\001\002\000\062\002\uffa9\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9\023" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\031\uffa9\032\uffa9" +
    "\033\uffa9\035\uffa9\001\002\000\062\002\uffab\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\021\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\026\uffab\027\uffab\031\uffab\032\uffab" +
    "\033\uffab\035\uffab\001\002\000\024\024\040\025\051\026" +
    "\032\027\026\053\141\054\140\055\134\056\135\060\041" +
    "\001\002\000\060\002\uffad\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad" +
    "\016\uffad\017\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\031\uffad\032\uffad\033\uffad\001\002" +
    "\000\026\017\145\024\040\025\051\026\032\027\026\053" +
    "\141\054\140\055\134\056\135\060\041\001\002\000\056" +
    "\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\001\002\000\056\002\uffdd\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\027\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\001\002\000\104\013\016\017\010\020\067\023\021" +
    "\024\040\025\051\026\032\027\026\030\061\031\013\032" +
    "\015\033\043\034\037\036\056\037\053\040\072\041\023" +
    "\042\044\043\042\044\065\045\036\046\011\047\064\050" +
    "\052\051\006\052\047\053\014\054\066\055\024\056\073" +
    "\057\057\060\041\061\050\001\002\000\056\002\uffc9\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9" +
    "\014\uffc9\015\147\016\uffc9\017\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\001\002\000\056\002\uffdc\004\uffdc\005\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\031\uffdc\032\uffdc\033\uffdc\001\002" +
    "\000\004\016\153\001\002\000\056\002\uffde\004\uffde\005" +
    "\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\014\uffde" +
    "\015\uffde\016\uffde\017\uffde\021\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\031\uffde\032\uffde\033\uffde" +
    "\001\002\000\110\004\uffd1\013\016\014\uffd1\017\010\020" +
    "\067\023\021\024\040\025\051\026\032\027\026\030\061" +
    "\031\013\032\015\033\043\034\037\036\056\037\053\040" +
    "\072\041\023\042\044\043\042\044\065\045\036\046\011" +
    "\047\064\050\052\051\006\052\047\053\014\054\066\055" +
    "\024\056\073\057\057\060\041\061\050\001\002\000\006" +
    "\004\157\014\160\001\002\000\006\004\uffd3\014\uffd3\001" +
    "\002\000\104\013\016\017\010\020\067\023\021\024\040" +
    "\025\051\026\032\027\026\030\061\031\013\032\015\033" +
    "\043\034\037\036\056\037\053\040\072\041\023\042\044" +
    "\043\042\044\065\045\036\046\011\047\064\050\052\051" +
    "\006\052\047\053\014\054\066\055\024\056\073\057\057" +
    "\060\041\061\050\001\002\000\056\002\uffd5\004\uffd5\005" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\014\uffd5" +
    "\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\001\002\000\006\004\uffd2\014\uffd2\001\002\000\066\017" +
    "\010\020\067\024\040\025\051\026\032\027\026\033\043" +
    "\034\037\036\056\037\053\040\072\041\023\042\044\043" +
    "\042\044\065\045\036\046\011\047\064\050\052\051\006" +
    "\052\047\053\014\054\066\055\024\056\073\060\041\001" +
    "\002\000\066\017\010\020\067\024\040\025\051\026\032" +
    "\027\026\033\043\034\037\036\056\037\053\040\072\041" +
    "\023\042\044\043\042\044\065\045\036\046\011\047\064" +
    "\050\052\051\006\052\047\053\014\054\066\055\024\056" +
    "\073\060\041\001\002\000\054\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\014\ufff9\016" +
    "\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9" +
    "\026\ufff9\027\ufff9\031\ufff9\032\ufff9\033\ufff9\001\002\000" +
    "\056\002\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf" +
    "\011\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\021" +
    "\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\001\002\000\054\002\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\014\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\024" +
    "\ufffa\025\ufffa\026\ufffa\027\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\001\002\000\066\017\010\020\067\024\040\025\051\026" +
    "\032\027\026\033\043\034\037\036\056\037\053\040\072" +
    "\041\023\042\044\043\042\044\065\045\036\046\011\047" +
    "\064\050\052\051\006\052\047\053\014\054\066\055\024" +
    "\056\073\060\041\001\002\000\066\017\010\020\067\024" +
    "\040\025\051\026\032\027\026\033\043\034\037\036\056" +
    "\037\053\040\072\041\023\042\044\043\042\044\065\045" +
    "\036\046\011\047\064\050\052\051\006\052\047\053\014" +
    "\054\066\055\024\056\073\060\041\001\002\000\054\002" +
    "\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\014\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\031\162\032\163" +
    "\033\uffcb\001\002\000\054\002\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc\016\uffcc" +
    "\017\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\031\162\032\163\033\uffcc\001\002\000\056" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011" +
    "\ufff8\012\ufff8\014\ufff8\015\147\016\ufff8\017\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\001\002\000\056\002\ufff7\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014" +
    "\ufff7\015\147\016\ufff7\017\ufff7\021\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\001\002\000\006\014\177\057\176\001\002\000\004" +
    "\014\200\001\002\000\056\002\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\031\uffe0\032\uffe0\033\uffe0\001\002" +
    "\000\056\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\001\002\000\102\013\016" +
    "\017\010\020\067\024\040\025\051\026\032\027\026\030" +
    "\061\031\013\032\015\033\043\034\037\036\056\037\053" +
    "\040\072\041\023\042\044\043\042\044\065\045\036\046" +
    "\011\047\064\050\052\051\006\052\047\053\014\054\066" +
    "\055\024\056\073\057\057\060\041\061\050\001\002\000" +
    "\050\002\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf" +
    "\011\uffcf\012\uffcf\014\uffcf\016\uffcf\017\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\033\203" +
    "\001\002\000\024\024\040\025\051\026\032\027\026\053" +
    "\141\054\140\055\134\056\135\060\041\001\002\000\004" +
    "\013\205\001\002\000\110\004\uffd1\013\016\014\uffd1\017" +
    "\010\020\067\023\021\024\040\025\051\026\032\027\026" +
    "\030\061\031\013\032\015\033\043\034\037\036\056\037" +
    "\053\040\072\041\023\042\044\043\042\044\065\045\036" +
    "\046\011\047\064\050\052\051\006\052\047\053\014\054" +
    "\066\055\024\056\073\057\057\060\041\061\050\001\002" +
    "\000\006\004\157\014\207\001\002\000\056\002\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\021\uffd4\022\uffd4\023" +
    "\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\001\002\000\046\002\uffb4\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\014\uffb4\016\uffb4" +
    "\017\uffb4\021\201\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\001\002\000\004\014\212\001\002\000\056" +
    "\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\001\002\000\054\002\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\014" +
    "\ufffc\016\ufffc\017\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\031\162\032\163\033\ufffc\001" +
    "\002\000\004\014\215\001\002\000\056\002\uffe1\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\001\002\000\054\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\014\ufffd\016\ufffd\017" +
    "\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\031\162\032\163\033\ufffd\001\002\000\056\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5" +
    "\012\ufff5\014\ufff5\015\147\016\ufff5\017\ufff5\021\ufff5\022" +
    "\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\062\003\034\004\067\005\032\006\053\007" +
    "\027\010\011\013\061\014\044\015\062\017\021\020\006" +
    "\021\030\022\070\023\024\024\057\025\045\026\017\027" +
    "\016\030\026\031\073\032\003\033\004\034\033\035\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\145\012\216\001\001\000\020\005\215\006" +
    "\053\007\027\010\011\033\004\034\164\035\054\001\001" +
    "\000\002\001\001\000\020\005\212\006\053\007\027\010" +
    "\011\033\004\034\164\035\054\001\001\000\062\003\034" +
    "\004\067\005\032\006\053\007\027\010\011\013\210\014" +
    "\044\015\062\017\021\020\006\021\030\022\070\023\024" +
    "\024\057\025\045\026\017\027\016\030\026\031\073\032" +
    "\003\033\004\034\033\035\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\003\034\004\067\005\032\006" +
    "\053\007\027\010\011\014\044\015\062\017\207\020\006" +
    "\021\030\031\073\032\003\033\004\034\033\035\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\172\033\004\034\164\035\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\145\012\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\135\035\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\034\004\067\005\032\006\053\007" +
    "\027\010\011\014\044\015\062\017\021\020\006\021\030" +
    "\023\077\024\057\025\045\026\017\027\016\030\026\031" +
    "\073\032\003\033\004\034\033\035\054\001\001\000\002" +
    "\001\001\000\054\003\034\004\067\005\032\006\053\007" +
    "\027\010\011\014\044\015\062\017\021\020\006\021\030" +
    "\024\101\025\045\026\017\027\016\030\026\031\073\032" +
    "\003\033\004\034\033\035\054\001\001\000\002\001\001" +
    "\000\052\003\034\004\067\005\032\006\053\007\027\010" +
    "\011\014\044\015\062\017\021\020\006\021\030\025\127" +
    "\026\017\027\016\030\026\031\073\032\003\033\004\034" +
    "\033\035\054\001\001\000\052\003\034\004\067\005\032" +
    "\006\053\007\027\010\011\014\044\015\062\017\021\020" +
    "\006\021\030\025\104\026\017\027\016\030\026\031\073" +
    "\032\003\033\004\034\033\035\054\001\001\000\002\001" +
    "\001\000\050\003\034\004\067\005\032\006\053\007\027" +
    "\010\011\014\044\015\062\017\021\020\006\021\030\026" +
    "\126\027\016\030\026\031\073\032\003\033\004\034\033" +
    "\035\054\001\001\000\050\003\034\004\067\005\032\006" +
    "\053\007\027\010\011\014\044\015\062\017\021\020\006" +
    "\021\030\026\125\027\016\030\026\031\073\032\003\033" +
    "\004\034\033\035\054\001\001\000\050\003\034\004\067" +
    "\005\032\006\053\007\027\010\011\014\044\015\062\017" +
    "\021\020\006\021\030\026\124\027\016\030\026\031\073" +
    "\032\003\033\004\034\033\035\054\001\001\000\050\003" +
    "\034\004\067\005\032\006\053\007\027\010\011\014\044" +
    "\015\062\017\021\020\006\021\030\026\111\027\016\030" +
    "\026\031\073\032\003\033\004\034\033\035\054\001\001" +
    "\000\002\001\001\000\046\003\034\004\067\005\032\006" +
    "\053\007\027\010\011\014\044\015\062\017\021\020\006" +
    "\021\030\027\123\030\026\031\073\032\003\033\004\034" +
    "\033\035\054\001\001\000\046\003\034\004\067\005\032" +
    "\006\053\007\027\010\011\014\044\015\062\017\021\020" +
    "\006\021\030\027\114\030\026\031\073\032\003\033\004" +
    "\034\033\035\054\001\001\000\002\001\001\000\044\003" +
    "\034\004\067\005\032\006\053\007\027\010\011\014\044" +
    "\015\062\017\021\020\006\021\030\030\122\031\073\032" +
    "\003\033\004\034\033\035\054\001\001\000\044\003\034" +
    "\004\067\005\032\006\053\007\027\010\011\014\044\015" +
    "\062\017\021\020\006\021\030\030\121\031\073\032\003" +
    "\033\004\034\033\035\054\001\001\000\044\003\034\004" +
    "\067\005\032\006\053\007\027\010\011\014\044\015\062" +
    "\017\021\020\006\021\030\030\120\031\073\032\003\033" +
    "\004\034\033\035\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\142\001\001\000\002\001\001\000\004\035\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\034\004" +
    "\067\005\032\006\053\007\027\010\011\013\151\014\044" +
    "\015\062\017\021\020\006\021\030\022\070\023\024\024" +
    "\057\025\045\026\017\027\016\030\026\031\073\032\003" +
    "\033\004\034\033\035\054\001\001\000\004\011\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\034\004\067\005\032\006\053\007\027\010" +
    "\011\013\155\014\044\015\062\016\154\017\021\020\006" +
    "\021\030\022\070\023\024\024\057\025\045\026\017\027" +
    "\016\030\026\031\073\032\003\033\004\034\033\035\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\034\004\067\005\032\006\053\007\027\010\011\013\160" +
    "\014\044\015\062\017\021\020\006\021\030\022\070\023" +
    "\024\024\057\025\045\026\017\027\016\030\026\031\073" +
    "\032\003\033\004\034\033\035\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\006\165\007\027\010\011" +
    "\033\004\034\164\035\054\001\001\000\016\006\163\007" +
    "\027\010\011\033\004\034\164\035\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\005" +
    "\171\006\053\007\027\010\011\033\004\034\164\035\054" +
    "\001\001\000\020\005\170\006\053\007\027\010\011\033" +
    "\004\034\164\035\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\145\012\173\001\001\000\004\011" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\003\034\004\067\005" +
    "\032\006\053\007\027\010\011\014\044\015\062\020\201" +
    "\021\030\031\073\032\003\033\004\034\033\035\054\001" +
    "\001\000\002\001\001\000\006\034\203\035\136\001\001" +
    "\000\002\001\001\000\064\003\034\004\067\005\032\006" +
    "\053\007\027\010\011\013\155\014\044\015\062\016\205" +
    "\017\021\020\006\021\030\022\070\023\024\024\057\025" +
    "\045\026\017\027\016\030\026\031\073\032\003\033\004" +
    "\034\033\035\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\150\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$GeneratedParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$GeneratedParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$GeneratedParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Symbol parse(String expr)
      throws Exception {
	GeneratedLexer scanner = new GeneratedLexer(new StringReader(expr));
	setScanner(scanner);
	return parse();
    }

    public void report_error(String message, Object info)
    {
        Log.error(message+" info: "+info);
    }

    public void report_fatal_error(String message, Object info)
      throws Exception
    {
        Log.error(message);
        throw new ParserException(message);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$GeneratedParser$actions {
  private final GeneratedParser parser;

  /** Constructor */
  CUP$GeneratedParser$actions(GeneratedParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$GeneratedParser$do_action(
    int                        CUP$GeneratedParser$act_num,
    java_cup.runtime.lr_parser CUP$GeneratedParser$parser,
    java.util.Stack            CUP$GeneratedParser$stack,
    int                        CUP$GeneratedParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$GeneratedParser$result;

      /* select the action based on the action number */
      switch (CUP$GeneratedParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // nc_name ::= OR 
            {
              String RESULT = null;
		 RESULT = "or"; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(27/*nc_name*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // nc_name ::= AND 
            {
              String RESULT = null;
		 RESULT = "and"; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(27/*nc_name*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // nc_name ::= MOD 
            {
              String RESULT = null;
		 RESULT = "mod"; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(27/*nc_name*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // nc_name ::= DIV 
            {
              String RESULT = null;
		 RESULT = "div"; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(27/*nc_name*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // nc_name ::= PROCESSING_INSTRUCTION 
            {
              String RESULT = null;
		 RESULT = "processing-instruction"; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(27/*nc_name*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // nc_name ::= TEXT 
            {
              String RESULT = null;
		 RESULT = "text"; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(27/*nc_name*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // nc_name ::= NODE 
            {
              String RESULT = null;
		 RESULT = "node"; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(27/*nc_name*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // nc_name ::= COMMENT 
            {
              String RESULT = null;
		 RESULT = "comment"; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(27/*nc_name*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // nc_name ::= NC_NAME 
            {
              String RESULT = null;
		int nnleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int nnright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		String nn = (String)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = nn; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(27/*nc_name*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // qname ::= nc_name COLON nc_name 
            {
              QName RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		String prefix = (String)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new FQName(prefix, name); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(26/*qname*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // qname ::= nc_name 
            {
              QName RESULT = null;
		int nnleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int nnright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		String nn = (String)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new LocalName(nn); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(26/*qname*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // name_test ::= qname 
            {
              QName RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		QName q = (QName)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = q; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(25/*name_test*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // name_test ::= nc_name COLON ASTERISK 
            {
              QName RESULT = null;
		int prefixleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int prefixright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		String prefix = (String)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		 RESULT = new PrefixedWildcard(prefix); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(25/*name_test*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // name_test ::= ASTERISK 
            {
              QName RESULT = null;
		 RESULT = new WildcardName(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(25/*name_test*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variable_ref ::= DOLLAR qname 
            {
              VariableReference RESULT = null;
		int qnleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int qnright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		QName qn = (QName)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new VariableReference(qn); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(24/*variable_ref*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // number ::= NUMBER 
            {
              Double RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Double i = (Double)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = i; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(23/*number*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // unary_expr ::= MINUS union_expr 
            {
              Expression RESULT = null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new NegativeExpression(ue); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(22/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // unary_expr ::= union_expr 
            {
              Expression RESULT = null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=ue; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(22/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // multiplicative_expr ::= multiplicative_expr MOD unary_expr 
            {
              Expression RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new MathExpression(me, ue, MathExpression.MODULO); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(21/*multiplicative_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multiplicative_expr ::= multiplicative_expr DIV unary_expr 
            {
              Expression RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new MathExpression(me, ue, MathExpression.DIVISION); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(21/*multiplicative_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // multiplicative_expr ::= multiplicative_expr ASTERISK unary_expr 
            {
              Expression RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int ueleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new MathExpression(me, ue, MathExpression.MULTIPLICATION); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(21/*multiplicative_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multiplicative_expr ::= unary_expr 
            {
              Expression RESULT = null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=ue; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(21/*multiplicative_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // additive_expr ::= additive_expr MINUS multiplicative_expr 
            {
              Expression RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new MathExpression(ae, me, MathExpression.MINUS); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(20/*additive_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // additive_expr ::= additive_expr PLUS multiplicative_expr 
            {
              Expression RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new MathExpression(ae, me, MathExpression.PLUS); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(20/*additive_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // additive_expr ::= multiplicative_expr 
            {
              Expression RESULT = null;
		int meleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression me = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=me; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(20/*additive_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relational_expr ::= relational_expr GTE additive_expr 
            {
              Expression RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new RelationalExpression(re, ae, RelationalExpression.GREATER_THAN_OR_EQUAL); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(19/*relational_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relational_expr ::= relational_expr LTE additive_expr 
            {
              Expression RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new RelationalExpression(re, ae, RelationalExpression.LESS_THAN_OR_EQUAL); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(19/*relational_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relational_expr ::= relational_expr GT additive_expr 
            {
              Expression RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new RelationalExpression(re, ae, RelationalExpression.GREATER_THAN); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(19/*relational_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relational_expr ::= relational_expr LT additive_expr 
            {
              Expression RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new RelationalExpression(re, ae, RelationalExpression.LESS_THAN); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(19/*relational_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relational_expr ::= additive_expr 
            {
              Expression RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=ae; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(19/*relational_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // equality_expr ::= equality_expr NOTEQUALS relational_expr 
            {
              Expression RESULT = null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new EqualityExpression(ee, re, true); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(18/*equality_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // equality_expr ::= equality_expr EQUALS relational_expr 
            {
              Expression RESULT = null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new EqualityExpression(ee, re); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(18/*equality_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // equality_expr ::= relational_expr 
            {
              Expression RESULT = null;
		int releft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression re = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=re; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(18/*equality_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // and_expr ::= and_expr AND equality_expr 
            {
              Expression RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int eeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new BooleanExpression(ae, ee, BooleanExpression.AND); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(17/*and_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // and_expr ::= equality_expr 
            {
              Expression RESULT = null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ee = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=ee; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(17/*and_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // or_expr ::= or_expr OR and_expr 
            {
              Expression RESULT = null;
		int oeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression oe = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int aeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new BooleanExpression(oe, ae, BooleanExpression.OR); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(16/*or_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // or_expr ::= and_expr 
            {
              Expression RESULT = null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression ae = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=ae; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(16/*or_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // filter_expr ::= primary_expr predicate_list 
            {
              Expression RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		List pl = (List)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new PredicatedFilterExpression(pe, pl); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(15/*filter_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // filter_expr ::= primary_expr 
            {
              Expression RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=pe; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(15/*filter_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // path_expr ::= filter_expr SLASHSLASH relative_location_path 
            {
              Expression RESULT = null;
		int feleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression fe = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		RelativeLocationPath rlp = (RelativeLocationPath)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 rlp.insert(new Step(new DescendantOrSelfAxis())); RESULT = new FilterExpression(fe, rlp); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(14/*path_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // path_expr ::= filter_expr SLASH relative_location_path 
            {
              Expression RESULT = null;
		int feleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression fe = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		RelativeLocationPath rlp = (RelativeLocationPath)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new FilterExpression(fe, rlp); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(14/*path_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // path_expr ::= filter_expr 
            {
              Expression RESULT = null;
		int feleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int feright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression fe = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=fe; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(14/*path_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // path_expr ::= location_path 
            {
              Expression RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		LocationPath lp = (LocationPath)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=lp; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(14/*path_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // union_expr ::= union_expr BAR path_expr 
            {
              Expression RESULT = null;
		int ueleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int ueright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Expression ue = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int peleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new UnionExpression(ue, pe); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(13/*union_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // union_expr ::= path_expr 
            {
              Expression RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=pe; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(13/*union_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arg_list ::= 
            {
              List RESULT = null;
		 RESULT = Collections.EMPTY_LIST; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(12/*arg_list*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // arg_list ::= arg_list COMMA expr 
            {
              List RESULT = null;
		int alleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		List al = (List)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 al.add(e); RESULT=al; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(12/*arg_list*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arg_list ::= expr 
            {
              List RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 List al = new ArrayList(); al.add(e); RESULT=al; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(12/*arg_list*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_call ::= path_expr DOT qname LPAREN arg_list RPAREN 
            {
              FunctionCall RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-5)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-5)).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-3)).right;
		QName name = (QName)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		List al = (List)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		 RESULT = new TypeFunctionCall(pe, name, al); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(11/*function_call*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_call ::= qname LPAREN arg_list RPAREN 
            {
              FunctionCall RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-3)).right;
		QName name = (QName)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		List al = (List)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		 RESULT = new
                FunctionCall(name, al); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(11/*function_call*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // primary_expr ::= function_call 
            {
              Expression RESULT = null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		FunctionCall fc = (FunctionCall)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = fc; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(10/*primary_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // primary_expr ::= number 
            {
              Expression RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new NumberExpression(n); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(10/*primary_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // primary_expr ::= LITERAL 
            {
              Expression RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new LiteralExpression(l); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(10/*primary_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // primary_expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		 RESULT = e; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(10/*primary_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // primary_expr ::= variable_ref 
            {
              Expression RESULT = null;
		int vrleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		VariableReference vr = (VariableReference)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = vr; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(10/*primary_expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= or_expr 
            {
              Expression RESULT = null;
		int oeleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int oeright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Expression oe = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=oe; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(9/*expr*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // predicate_list ::= predicate_list predicate 
            {
              List RESULT = null;
		int plleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		List pl = (List)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 pl.add(p); RESULT=pl; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(8/*predicate_list*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // predicate_list ::= predicate 
            {
              List RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Predicate p = (Predicate)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 List pl = new ArrayList(); pl.add(p); RESULT=pl; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(8/*predicate_list*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // predicate ::= LANGLE expr RANGLE 
            {
              Predicate RESULT = null;
		int peleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int peright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		Expression pe = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		 RESULT = new Predicate(pe); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(7/*predicate*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // node_test ::= PROCESSING_INSTRUCTION LPAREN LITERAL RPAREN 
            {
              NodeTest RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;

              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(6/*node_test*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // node_test ::= PROCESSING_INSTRUCTION LPAREN RPAREN 
            {
              NodeTest RESULT = null;
		 RESULT = new NodeType(NodeType.PROCESSING_INSTRUCTION); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(6/*node_test*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // node_test ::= COMMENT LPAREN RPAREN 
            {
              NodeTest RESULT = null;
		 RESULT = new NodeType(NodeType.COMMENT); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(6/*node_test*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // node_test ::= TEXT LPAREN RPAREN 
            {
              NodeTest RESULT = null;
		 RESULT = new NodeType(NodeType.TEXT); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(6/*node_test*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // node_test ::= NODE LPAREN RPAREN 
            {
              NodeTest RESULT = null;
		 RESULT = new NodeType(NodeType.NODE); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(6/*node_test*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // node_test ::= name_test 
            {
              NodeTest RESULT = null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		QName nt = (QName)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new NameTest(nt); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(6/*node_test*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // axis_specifier ::= SELF 
            {
              Axis RESULT = null;
		 RESULT = new SelfAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // axis_specifier ::= PRECEDING_SIBLING 
            {
              Axis RESULT = null;
		 RESULT = new PrecedingSiblingAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // axis_specifier ::= PRECEDING 
            {
              Axis RESULT = null;
		 RESULT = new PrecedingAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // axis_specifier ::= PARENT 
            {
              Axis RESULT = null;
		 RESULT = new ParentAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // axis_specifier ::= NAMESPACE 
            {
              Axis RESULT = null;
		 RESULT = new NamespaceAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // axis_specifier ::= FOLLOWING_SIBLING 
            {
              Axis RESULT = null;
		 RESULT = new FollowingSiblingAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // axis_specifier ::= FOLLOWING 
            {
              Axis RESULT = null;
		 RESULT = new FollowingAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // axis_specifier ::= DESCENDANT_OR_SELF 
            {
              Axis RESULT = null;
		 RESULT = new DescendantOrSelfAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // axis_specifier ::= DESCENDANT 
            {
              Axis RESULT = null;
		 RESULT = new DescendantAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // axis_specifier ::= CHILD 
            {
              Axis RESULT = null;
		 RESULT = new ChildAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // axis_specifier ::= ATTRIBUTE 
            {
              Axis RESULT = null;
		 RESULT = new AttributeAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // axis_specifier ::= ANCESTOR_OR_SELF 
            {
              Axis RESULT = null;
		 RESULT = new AncestorOrSelfAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // axis_specifier ::= ANCESTOR 
            {
              Axis RESULT = null;
		 RESULT = new AncestorAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // axis_specifier ::= AT 
            {
              Axis RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new AttributeAxis(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(5/*axis_specifier*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // step ::= DOTDOT 
            {
              Step RESULT = null;
		 RESULT = new Step(new ParentAxis()); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(4/*step*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // step ::= DOT 
            {
              Step RESULT = null;
		 RESULT = new Step(new SelfAxis()); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(4/*step*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // step ::= node_test predicate_list 
            {
              Step RESULT = null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		NodeTest nt = (NodeTest)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		List pl = (List)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new PredicatedStep(nt, pl); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(4/*step*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // step ::= node_test 
            {
              Step RESULT = null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		NodeTest nt = (NodeTest)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new Step(nt); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(4/*step*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // step ::= axis_specifier node_test predicate_list 
            {
              Step RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		Axis as = (Axis)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int ntleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		NodeTest nt = (NodeTest)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		List pl = (List)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new PredicatedStep(as, nt, pl); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(4/*step*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // step ::= axis_specifier node_test 
            {
              Step RESULT = null;
		int asleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		Axis as = (Axis)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		int ntleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		NodeTest nt = (NodeTest)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new Step(as, nt); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(4/*step*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // relative_location_path ::= relative_location_path SLASHSLASH step 
            {
              RelativeLocationPath RESULT = null;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		RelativeLocationPath rlp = (RelativeLocationPath)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Step s = (Step)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 rlp.add(new Step(new DescendantOrSelfAxis())); rlp.add(s); RESULT = rlp; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(3/*relative_location_path*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // relative_location_path ::= relative_location_path SLASH step 
            {
              RelativeLocationPath RESULT = null;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).right;
		RelativeLocationPath rlp = (RelativeLocationPath)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Step s = (Step)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 rlp.add(s); RESULT = rlp; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(3/*relative_location_path*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // relative_location_path ::= step 
            {
              RelativeLocationPath RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		Step s = (Step)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new RelativeLocationPath(s); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(3/*relative_location_path*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // absolute_location_path ::= SLASHSLASH relative_location_path 
            {
              LocationPath RESULT = null;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		RelativeLocationPath rlp = (RelativeLocationPath)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new AbbreviatedAbsoluteLocationPath(rlp); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(2/*absolute_location_path*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // absolute_location_path ::= SLASH relative_location_path 
            {
              LocationPath RESULT = null;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		RelativeLocationPath rlp = (RelativeLocationPath)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT = new AbsoluteLocationPath(rlp); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(2/*absolute_location_path*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // absolute_location_path ::= SLASH 
            {
              LocationPath RESULT = null;
		 RESULT = new AbsoluteLocationPath(); 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(2/*absolute_location_path*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // location_path ::= absolute_location_path 
            {
              LocationPath RESULT = null;
		int alpleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int alpright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		LocationPath alp = (LocationPath)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=alp; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(1/*location_path*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // location_path ::= relative_location_path 
            {
              LocationPath RESULT = null;
		int rlpleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left;
		int rlpright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right;
		RelativeLocationPath rlp = (RelativeLocationPath)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).value;
		 RESULT=rlp; 
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(1/*location_path*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          return CUP$GeneratedParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expr EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).value;
		RESULT = start_val;
              CUP$GeneratedParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$GeneratedParser$stack.elementAt(CUP$GeneratedParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$GeneratedParser$parser.done_parsing();
          return CUP$GeneratedParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

